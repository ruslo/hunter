# Copyright (c) 2013-2015, Ruslan Baratov
# All rights reserved.

cmake_minimum_required(VERSION 3.0)
project(Hunter)

include(ExternalProject) # ExternalProject_Add

# Scheme for download and install boost library

list(APPEND CMAKE_MODULE_PATH "@HUNTER_SELF@/cmake/modules")

include(CheckSymbolExists) # check_symbol_exists

include(hunter_boost_component_b2_args)
include(hunter_fatal_error)
include(hunter_install_boost_config)
include(hunter_internal_error)
include(hunter_status_debug)
include(hunter_test_string_not_empty)

hunter_status_debug("Scheme: url_sha1_boost_library")

# Check preconditions
hunter_test_string_not_empty("@HUNTER_SELF@")
hunter_test_string_not_empty("@HUNTER_EP_NAME@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_DOWNLOAD_DIR@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_SOURCE_DIR@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_BUILD_DIR@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_INSTALL_PREFIX@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_COMPONENT@")
hunter_test_string_not_empty("@CMAKE_CXX_COMPILER@")
hunter_test_string_not_empty("@CMAKE_CXX_COMPILER_ID@")
hunter_test_string_not_empty("@HUNTER_Boost_VERSION@")
if("@MSVC@")
  hunter_test_string_not_empty("@HUNTER_MSVC_ARCH@")
  hunter_test_string_not_empty("@HUNTER_MSVC_VCVARSALL@")
endif()

# Same logic in all url_sha1_boost* schemes (TODO: DRY)
macro(BOOST_COMPONENT name version)
  list(APPEND BOOST_COMPONENT_NAMES ${name})
  set(BOOST_COMPONENT_${name}_VERSION ${version})
endmacro()

boost_component(atomic 1.53.0)
boost_component(chrono 1.47.0)
boost_component(container 1.56.0)
boost_component(context 1.51.0)
boost_component(coroutine 1.53.0)
boost_component(date_time 1.29.0)
boost_component(exception 1.36.0)
boost_component(filesystem 1.30.0)
boost_component(graph 1.18.0)
boost_component(graph_parallel 1.18.0)
boost_component(iostreams 1.33.0)
boost_component(locale 1.48.0)
boost_component(log 1.54.0)
boost_component(math 1.23.0)
boost_component(mpi 1.35.0)
boost_component(program_options 1.32.0)
boost_component(python 1.19.0)
boost_component(random 1.15.0)
boost_component(regex 1.18.0)
boost_component(serialization 1.32.0)
boost_component(signals 1.29.0)
boost_component(system 1.35.0)
boost_component(test 1.21.0)
boost_component(thread 1.25.0)
boost_component(timer 1.9.0)
boost_component(wave 1.33.0)

foreach(name IN LISTS BOOST_COMPONENT_NAMES)
  if(NOT @HUNTER_Boost_VERSION@ VERSION_LESS BOOST_COMPONENT_${name}_VERSION)
    list(APPEND boost_libs ${name})
  endif()
endforeach()

set(libfound NO)
foreach(x ${boost_libs})
  string(COMPARE EQUAL "${x}" "@HUNTER_PACKAGE_COMPONENT@" result)
  if(result)
    set(libfound YES)
  endif()
endforeach()

if(NOT libfound)
  hunter_internal_error("No such library")
endif()

string(COMPARE EQUAL "@CMAKE_CXX_COMPILER_ID@" "Clang" compiler_is_clang)

if("@ANDROID@")
  set(toolset_name "gcc")
  set(toolset_version "ndk")
elseif("@APPLE@")
  set(toolset_name "darwin")
  set(toolset_version "")
elseif("@CMAKE_COMPILER_IS_GNUCXX@")
  set(toolset_name "gcc")
  set(toolset_version "")
elseif(compiler_is_clang)
  set(toolset_name "clang")
  set(toolset_version "")
elseif("@MSVC@")
  set(toolset_name "msvc")
  set(toolset_version "")
else()
  hunter_fatal_error("TODO: set toolset for boost" WIKI "error.boost.toolset")
endif()

if("@ANDROID@")
  get_directory_property(defs COMPILE_DEFINITIONS)
  foreach(def ${defs})
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D${def}")
  endforeach()

  get_directory_property(include_dirs INCLUDE_DIRECTORIES)
  foreach(include_dir ${include_dirs})
    set(
        CMAKE_CXX_FLAGS
        "${CMAKE_CXX_FLAGS} ${CMAKE_INCLUDE_SYSTEM_FLAG_CXX} ${include_dir}"
    )
  endforeach()
endif()

if("@MSVC@")
  set(env_cmd "@HUNTER_MSVC_VCVARSALL@" "@HUNTER_MSVC_ARCH@")
else()
  # Workaround for: http://public.kitware.com/Bug/view.php?id=15567
  set(env_cmd "@CMAKE_COMMAND@" -E echo "configure")
endif()

if("@MSVC@")
  set(boost_compiler  "@CMAKE_CXX_COMPILER@")
  string(REPLACE "/" "\\" boost_compiler "${boost_compiler}")
else()
  set(boost_compiler "@CMAKE_CXX_COMPILER@")
endif()

string(COMPARE EQUAL "@HUNTER_PACKAGE_COMPONENT@" "mpi" is_mpi)
if(is_mpi)
  set(using_mpi "using mpi ;")
  if("@MSVC@")
    find_package(MPI)
    if(NOT MPI_CXX_FOUND)
      # Fix concurrent output to console
      execute_process(
          COMMAND
          "@CMAKE_COMMAND@"
          -E
          echo
          "MPI is required. Please install it. For example MS-MPI: "
          "http://msdn.microsoft.com/en-us/library/bb524831%28v=vs.85%29.aspx"
      )
      hunter_fatal_error("MPI is required" WIKI "error.boost.mpi.on.windows")
    endif()
    get_filename_component(MPI_DIR "${MPI_CXX_INCLUDE_PATH}/.." ABSOLUTE)
    string(REPLACE "/" "\\\\" MPI_DIR "${MPI_DIR}")
    configure_file(
        "@HUNTER_SELF@/scripts/mpi.jam"
        "@HUNTER_PACKAGE_BUILD_DIR@/tools/build/v2/tools/mpi.jam"
    )

    # HUNTER_PACKAGE_SOURCE_DIR will be removed while unpacking. Save mpi.jam
    # in HUNTER_PACKAGE_BUILD_DIR first and move it to HUNTER_PACKAGE_SOURCE_DIR
    # on configure step
    set(
        copy_mpi_command
        COMMAND
        "@CMAKE_COMMAND@"
        -E
        copy
        "@HUNTER_PACKAGE_BUILD_DIR@/tools/build/v2/tools/mpi.jam"
        "@HUNTER_PACKAGE_SOURCE_DIR@/tools/build/v2/tools/mpi.jam"
    )
  endif()
  set(variants variant=release) # build bug
else()
  set(using_mpi "")
  set(variants variant=debug,release)
  set(copy_mpi_command "")
endif()

if("@MSVC@")
  # Disable auto-linking
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /DBOOST_ALL_NO_LIB=1")

  # Fix some compile errors
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /DNOMINMAX")

  # Fix boost.python:
  # include\pymath.h: warning C4273: 'round': inconsistent dll linkage
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /DHAVE_ROUND")
endif()

string(COMPARE NOTEQUAL "@CMAKE_OSX_SYSROOT@" "" have_osx_sysroot)
if(have_osx_sysroot)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -isysroot @CMAKE_OSX_SYSROOT@")
endif()

set(link_opts link=static)

set(toolset_full_name ${toolset_name})
string(COMPARE NOTEQUAL "${toolset_version}" "" has_toolset_version)
if(has_toolset_version)
  set(toolset_full_name ${toolset_name}-${toolset_version})
endif()

set(boost_user_jam "@HUNTER_PACKAGE_BUILD_DIR@/boost.user.jam")
set(
    build_opts
    -a
    ${link_opts}
    threading=multi
    ${variants}
    --layout=tagged
    toolset=${toolset_full_name}
    "--user-config=${boost_user_jam}"
    --with-@HUNTER_PACKAGE_COMPONENT@
)

hunter_boost_component_b2_args(
    "@HUNTER_PACKAGE_COMPONENT@"
    "@HUNTER_Boost_CMAKE_ARGS@"
    b2_component_opts
)

string(REPLACE " " ";" cxx_flags_list "${CMAKE_CXX_FLAGS}")

file(
    WRITE
    ${boost_user_jam}
    "using ${toolset_name}\n"
    "  : ${toolset_version}\n"
)

if(MSVC)
  # For Visual Studio C++ flags must not be set in compiler section.
  # Section <compileflags> should be used.
  #   * https://github.com/ruslo/hunter/issues/179
  file(APPEND ${boost_user_jam} "  : \"${boost_compiler}\"\n")
else()
  # For Android C++ flags must be part of the compiler section:
  #   * https://github.com/ruslo/hunter/issues/174
  # For 'sanitize-address' toolchain flags must be part of the compiler section:
  #   * https://github.com/ruslo/hunter/issues/269
  file(
      APPEND ${boost_user_jam} "  : \"${boost_compiler}\" ${CMAKE_CXX_FLAGS}\n"
  )
endif()

file(
    APPEND
    ${boost_user_jam}
    "  : <archiver> \"${CMAKE_AR}\"\n"
)

if(MSVC)
  # See 'boost_compiler' section
  foreach(cxx_flag ${cxx_flags_list})
    file(
        APPEND
        ${boost_user_jam}
        "  <compileflags>${cxx_flag}\n"
    )
  endforeach()
endif()

file(
    APPEND
    ${boost_user_jam}
    ";\n"
    "${using_mpi}\n"
)

list(APPEND build_opts ${b2_component_opts})

if(CMAKE_EXE_LINKER_FLAGS)
  list(APPEND build_opts "linkflags=${CMAKE_EXE_LINKER_FLAGS}")
endif()

string(COMPARE EQUAL "@HUNTER_MSVC_ARCH@" "amd64" is_x64)
if("@MSVC@" AND is_x64)
  list(APPEND build_opts "address-model=64")
endif()

string(COMPARE NOTEQUAL "@HUNTER_JOBS_OPTION@" "" have_jobs)
if(have_jobs)
  list(APPEND build_opts "-j" "@HUNTER_JOBS_OPTION@")
endif()

if(@HUNTER_STATUS_DEBUG@)
  set(verbose_output "-d+2 --debug-configuration")
endif()

if("@MSVC@" OR "@MINGW@")
  set(bootstrap_cmd "bootstrap.bat")
  set(b2_cmd "b2")
else()
  set(bootstrap_cmd "./bootstrap.sh")
  set(b2_cmd "./b2")
endif()


if(HUNTER_STATUS_DEBUG)
  file(READ "${boost_user_jam}" USER_JAM_CONTENT)
  hunter_status_debug("Build options:")
  foreach(opt ${build_opts})
    hunter_status_debug("  ${opt}")
  endforeach()
  hunter_status_debug("------")
  hunter_status_debug("Boost user jam config:")
  hunter_status_debug("------")
  hunter_status_debug("${USER_JAM_CONTENT}")
  hunter_status_debug("------")
endif()

if("@MSVC@")
  # Logging as Workaround for VS_UNICODE_OUTPUT issue:
  # https://public.kitware.com/Bug/view.php?id=14266
  set(log_opts LOG_CONFIGURE 1 LOG_BUILD 1 LOG_INSTALL 1)
else()
  set(log_opts "")
endif()

ExternalProject_Add(
    "@HUNTER_EP_NAME@"
    URL
    @HUNTER_PACKAGE_URL@
    URL_HASH
    SHA1=@HUNTER_PACKAGE_SHA1@
    DOWNLOAD_DIR
    "@HUNTER_PACKAGE_DOWNLOAD_DIR@"
    SOURCE_DIR
    "@HUNTER_PACKAGE_SOURCE_DIR@"
    INSTALL_DIR
    "@HUNTER_PACKAGE_INSTALL_PREFIX@"
        # not used, just avoid creating Install/<name> empty directory
    CONFIGURE_COMMAND
    ${env_cmd}
    ${copy_mpi_command}
    COMMAND
    ${bootstrap_cmd}
    BUILD_COMMAND
    ${b2_cmd}
    ${verbose_output}
    ${build_opts}
    BUILD_IN_SOURCE
    1
    INSTALL_COMMAND
    ${b2_cmd}
    -d0
    ${build_opts}
    stage # install only libraries, headers installed in `url_sha1_boost`
    "--stagedir=@HUNTER_PACKAGE_INSTALL_PREFIX@"
    ${log_opts}
)

# Forward some variables
set(HUNTER_SELF "@HUNTER_SELF@")
set(HUNTER_PACKAGE_INSTALL_PREFIX "@HUNTER_PACKAGE_INSTALL_PREFIX@")
set(HUNTER_Boost_VERSION "@HUNTER_Boost_VERSION@")

hunter_install_boost_config()
