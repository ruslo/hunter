# Copyright (c) 2013, 2015 Ruslan Baratov
# All rights reserved.

cmake_minimum_required(VERSION 3.0)
project(Hunter)

include(ExternalProject) # ExternalProject_Add

# Scheme for download boost and install header-only libraries (no build step)

list(APPEND CMAKE_MODULE_PATH "@HUNTER_SELF@/cmake/modules")

include(hunter_install_boost_config)
include(hunter_report_broken_package)
include(hunter_status_debug)
include(hunter_status_print)
include(hunter_test_string_not_empty)

hunter_status_debug("Scheme: url_sha1_boost")

# Check preconditions
hunter_test_string_not_empty("@HUNTER_SELF@")
hunter_test_string_not_empty("@HUNTER_EP_NAME@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_URL@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_SHA1@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_DOWNLOAD_DIR@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_SOURCE_DIR@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_INSTALL_PREFIX@")
hunter_test_string_not_empty("@HUNTER_Boost_VERSION@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_LICENSE_DIR@")
hunter_test_string_not_empty("@HUNTER_GLOBAL_SCRIPT_DIR@")

if("@MSVC@")
  hunter_test_string_not_empty("@HUNTER_MSVC_ARCH@")
  hunter_test_string_not_empty("@HUNTER_MSVC_VCVARSALL@")
endif()

# Same logic in all url_sha1_boost* schemes (TODO: DRY)
macro(BOOST_COMPONENT name version)
  list(APPEND BOOST_COMPONENT_NAMES ${name})
  set(BOOST_COMPONENT_${name}_VERSION ${version})
endmacro()

boost_component(atomic 1.53.0)
boost_component(chrono 1.47.0)
boost_component(container 1.56.0)
boost_component(context 1.51.0)
boost_component(coroutine 1.53.0)
boost_component(coroutine2 1.60.0)
boost_component(date_time 1.29.0)
boost_component(exception 1.36.0)
boost_component(fiber 1.62.0)
boost_component(filesystem 1.30.0)
boost_component(graph 1.18.0)
boost_component(graph_parallel 1.18.0)
boost_component(iostreams 1.33.0)
boost_component(locale 1.48.0)
boost_component(log 1.54.0)
boost_component(math 1.23.0)
boost_component(metaparse 1.61.0)
boost_component(mpi 1.35.0)
boost_component(program_options 1.32.0)
boost_component(python 1.19.0)
boost_component(random 1.15.0)
boost_component(regex 1.18.0)
boost_component(serialization 1.32.0)
boost_component(signals 1.29.0)
boost_component(system 1.35.0)
boost_component(test 1.21.0)
boost_component(thread 1.25.0)
boost_component(timer 1.9.0)
boost_component(type_erasure 1.60.0)
boost_component(wave 1.33.0)

foreach(name IN LISTS BOOST_COMPONENT_NAMES)
  if(NOT @HUNTER_Boost_VERSION@ VERSION_LESS BOOST_COMPONENT_${name}_VERSION)
    list(APPEND boost_libs ${name})
  endif()
endforeach()

# MinGW 1.55 is broken
string(REGEX MATCH "1.55.0*" version_1_55 "@HUNTER_Boost_VERSION@")
if(version_1_55 AND MINGW)
  hunter_report_broken_package("MinGW + Boost 1.55.0 (Use >= 1.56.0)")
endif()

foreach(x ${boost_libs})
  list(APPEND boost_list "--without-${x}")
endforeach()

if("@MSVC@")
  set(env_cmd "@HUNTER_MSVC_VCVARSALL@" "@HUNTER_MSVC_ARCH@")
else()
  set(env_cmd "")
endif()

if("@MSVC@" OR "@MINGW@")
  set(install_cmd "b2")
  set(bootstrap_cmd "bootstrap.bat")
else()
  set(install_cmd "./b2")
  if(APPLE)
    # Clear Xcode environment
    set(
        bootstrap_cmd
        . "@HUNTER_GLOBAL_SCRIPT_DIR@/clear-all.sh" && ./bootstrap.sh
    )
  else()
    set(bootstrap_cmd "./bootstrap.sh")
  endif()
endif()

if("@MSVC@")
  # Logging as Workaround for VS_UNICODE_OUTPUT issue:
  # https://public.kitware.com/Bug/view.php?id=14266
  set(log_opts LOG_CONFIGURE 1 LOG_BUILD 1 LOG_INSTALL 1 LOG_DOWNLOAD 1)
  get_filename_component(x "@HUNTER_PACKAGE_SOURCE_DIR@/.." ABSOLUTE)
  hunter_status_print(
      "For progress check log files in directory: ${x}"
  )
else()
  set(log_opts "")
endif()

ExternalProject_Add(
    "@HUNTER_EP_NAME@"
    URL
    @HUNTER_PACKAGE_URL@
    URL_HASH
    SHA1=@HUNTER_PACKAGE_SHA1@
    DOWNLOAD_DIR
    "@HUNTER_PACKAGE_DOWNLOAD_DIR@"
    SOURCE_DIR
    "@HUNTER_PACKAGE_SOURCE_DIR@"
    INSTALL_DIR
    "@HUNTER_PACKAGE_INSTALL_PREFIX@"
        # not used, just avoid creating Install/<name> empty directory
    CONFIGURE_COMMAND
    ${env_cmd}
    COMMAND
    ${bootstrap_cmd}
    BUILD_COMMAND
    ""
    BUILD_IN_SOURCE
    1
    INSTALL_COMMAND
    ${install_cmd}
    --layout=tagged
    -d0
    install
    ${boost_list}
    "--prefix=@HUNTER_PACKAGE_INSTALL_PREFIX@"
    COMMAND # Copy license files
    "@CMAKE_COMMAND@"
    "-C@HUNTER_ARGS_FILE@" # for 'HUNTER_INSTALL_LICENSE_FILES'
    "-Dsrcdir=@HUNTER_PACKAGE_SOURCE_DIR@"
    "-Ddstdir=@HUNTER_PACKAGE_LICENSE_DIR@"
    -P
    "@HUNTER_SELF@/scripts/try-copy-license.cmake"
    ${log_opts}
)

# Forward some variables
set(HUNTER_SELF "@HUNTER_SELF@")
set(HUNTER_PACKAGE_INSTALL_PREFIX "@HUNTER_PACKAGE_INSTALL_PREFIX@")
set(HUNTER_Boost_VERSION "@HUNTER_Boost_VERSION@")

hunter_install_boost_config()
