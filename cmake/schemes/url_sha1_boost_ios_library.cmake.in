# Copyright (c) 2013, Ruslan Baratov
# All rights reserved.

cmake_minimum_required(VERSION 3.0)
project(Hunter) # Language is not NONE, need CMAKE_CXX_FLAGS from toolchain

include(ExternalProject) # ExternalProject_Add

# Scheme for download and install ios universal boost library

list(APPEND CMAKE_MODULE_PATH "@HUNTER_SELF@/cmake/modules")

include(hunter_internal_error)
include(hunter_status_debug)
include(hunter_test_string_not_empty)
include(hunter_unsetvar)

hunter_status_debug("Scheme: url_sha1_boost_ios_library")

# Check preconditions
hunter_test_string_not_empty("@HUNTER_SELF@")
hunter_test_string_not_empty("@HUNTER_EP_NAME@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_URL@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_SHA1@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_DOWNLOAD_DIR@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_SOURCE_DIR@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_BUILD_DIR@")
hunter_test_string_not_empty("@HUNTER_INSTALL_PREFIX@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_COMPONENT@")
hunter_test_string_not_empty("@IPHONEOS_ARCHS@")
# This test was disabled to support single architecture/native iOS builds (i.e., arm64)
#hunter_test_string_not_empty("@IPHONESIMULATOR_ARCHS@")
hunter_test_string_not_empty("@IPHONESIMULATOR_ROOT@")
hunter_test_string_not_empty("@IPHONEOS_ROOT@")
hunter_test_string_not_empty("@IPHONEOS_SDK_ROOT@")
hunter_test_string_not_empty("@IPHONESIMULATOR_SDK_ROOT@")
hunter_test_string_not_empty("@HUNTER_Boost_VERSION@")

# Same logic in all url_sha1_boost* schemes (TODO: DRY)
macro(BOOST_COMPONENT name version)
  list(APPEND BOOST_COMPONENT_NAMES ${name})
  set(BOOST_COMPONENT_${name}_VERSION ${version})
endmacro()

boost_component(atomic 1.53.0)
boost_component(chrono 1.47.0)
boost_component(container 1.56.0)
boost_component(context 1.51.0)
boost_component(coroutine 1.53.0)
boost_component(date_time 1.29.0)
boost_component(exception 1.36.0)
boost_component(filesystem 1.30.0)
boost_component(graph 1.18.0)
boost_component(graph_parallel 1.18.0)
boost_component(iostreams 1.33.0)
boost_component(locale 1.48.0)
boost_component(log 1.54.0)
boost_component(math 1.23.0)
boost_component(mpi 1.35.0)
boost_component(program_options 1.32.0)
boost_component(python 1.19.0)
boost_component(random 1.15.0)
boost_component(regex 1.18.0)
boost_component(serialization 1.32.0)
boost_component(signals 1.29.0)
boost_component(system 1.35.0)
boost_component(test 1.21.0)
boost_component(thread 1.25.0)
boost_component(timer 1.9.0)
boost_component(wave 1.33.0)

foreach(name IN LISTS BOOST_COMPONENT_NAMES)
  if(NOT @HUNTER_Boost_VERSION@ VERSION_LESS BOOST_COMPONENT_${name}_VERSION)
    list(APPEND boost_libs ${name})
  endif()
endforeach()

set(libfound NO)
foreach(x ${boost_libs})
  string(COMPARE EQUAL "${x}" "@HUNTER_PACKAGE_COMPONENT@" result)
  if(result)
    set(libfound YES)
  endif()
endforeach()

if(NOT libfound)
  hunter_internal_error("No such library")
endif()

hunter_unsetvar(iphoneos_archs)
foreach(x @IPHONEOS_ARCHS@)
  set(iphoneos_archs "${iphoneos_archs} -arch ${x}")
endforeach()

hunter_unsetvar(isim_archs)
foreach(x @IPHONESIMULATOR_ARCHS@)
  set(isim_archs "${isim_archs} -arch ${x}")
endforeach()

set(boost_user_jam "@HUNTER_PACKAGE_BUILD_DIR@/boost.user.jam")
file(
     WRITE
     ${boost_user_jam}
     "using darwin : iphoneos\n"
     "    : xcrun clang++ ${iphoneos_archs} -isysroot @IPHONEOS_SDK_ROOT@\n"
     "    : <striper> <root>@IPHONEOS_ROOT@\n"
     "    : <architecture>arm <target-os>iphone\n"
     ";\n"
     "\n"
     "using darwin : iphonesimulator\n"
     "    : xcrun clang++ ${isim_archs} -isysroot @IPHONESIMULATOR_SDK_ROOT@\n"
     "    : <striper> <root>@IPHONESIMULATOR_ROOT@\n"
     "    : <architecture>x86 <target-os>iphone\n"
     ";"
)

set(
    build_opts
    -a
    link=static
    threading=multi
    variant=release,debug
    define=BOOST_SP_NO_SYNC
    --layout=tagged
    --user-config="${boost_user_jam}"
)

if(CMAKE_CXX_FLAGS)
  list(APPEND build_opts "cxxflags=${CMAKE_CXX_FLAGS}")
endif()

string(COMPARE NOTEQUAL "@HUNTER_JOBS_OPTION@" "" have_jobs)
if(have_jobs)
  list(APPEND build_opts "-j" "@HUNTER_JOBS_OPTION@")
endif()

set(
    build_opts_iphoneos
    toolset=darwin-iphoneos
    target-os=iphone
    architecture=arm
    instruction-set=armv7
    ${build_opts}
)

set(
    build_opts_iphonesimulator
    toolset=darwin-iphonesimulator
    target-os=iphone
    architecture=x86
    ${build_opts}
)

# Clear Xcode environment
set(
    bootstrap
    . "@HUNTER_SELF@/scripts/clear-all.sh" &&
    ./bootstrap.sh
    "--with-libraries=@HUNTER_PACKAGE_COMPONENT@"
    "--prefix=@HUNTER_INSTALL_PREFIX@"
)

if(@HUNTER_STATUS_DEBUG@)
  set(verbose_output "-d+2 --debug-configuration")
endif()

ExternalProject_Add(
    "@HUNTER_EP_NAME@-ios"
    URL
    @HUNTER_PACKAGE_URL@
    URL_HASH
    SHA1=@HUNTER_PACKAGE_SHA1@
    DOWNLOAD_DIR
    "@HUNTER_PACKAGE_DOWNLOAD_DIR@"
    SOURCE_DIR
    "@HUNTER_PACKAGE_SOURCE_DIR@"
    INSTALL_DIR
    "@HUNTER_INSTALL_PREFIX@"
        # not used, just avoid creating Install/<name> empty directory
    CONFIGURE_COMMAND
    ${bootstrap}
    BUILD_COMMAND
    ./b2
    ${verbose_output}
    ${build_opts_iphoneos}
    BUILD_IN_SOURCE
    1
    INSTALL_COMMAND
    ""
)

ExternalProject_Add(
    "@HUNTER_EP_NAME@-ios_sim"
    DOWNLOAD_COMMAND
    ""
    DOWNLOAD_DIR
    "@HUNTER_PACKAGE_DOWNLOAD_DIR@"
    SOURCE_DIR
    "@HUNTER_PACKAGE_SOURCE_DIR@"
    INSTALL_DIR
    "@HUNTER_INSTALL_PREFIX@"
        # not used, just avoid creating Install/<name> empty directory
    CONFIGURE_COMMAND
    ${bootstrap}
    BUILD_COMMAND
    ./b2
    ${verbose_output}
    ${build_opts_iphonesimulator}
    BUILD_IN_SOURCE
    1
    INSTALL_COMMAND
    ""
)

add_dependencies(
    "@HUNTER_EP_NAME@-ios_sim"
    "@HUNTER_EP_NAME@-ios"
)

string(COMPARE EQUAL "@HUNTER_PACKAGE_COMPONENT@" "test" is_test)
if(is_test)
  set(LIBNAME unit_test_framework)
else()
  set(LIBNAME "@HUNTER_PACKAGE_COMPONENT@")
endif()

string(COMPARE EQUAL "@HUNTER_PACKAGE_COMPONENT@" "log" log_setup_target)
if(log_setup_target)
  set(
      extra_lib_command
      COMMAND
      "@HUNTER_SELF@/scripts/create-boost-ios-fatlib.sh"
      "@HUNTER_PACKAGE_SOURCE_DIR@"
      "log_setup"
      "@HUNTER_PACKAGE_COMPONENT@"
      "@HUNTER_INSTALL_PREFIX@/lib"
  )
else()
  set(extra_lib_command "")
endif()

ExternalProject_Add(
    "@HUNTER_EP_NAME@-ios_universal"
    DEPENDS
    "@HUNTER_EP_NAME@-ios"
    "@HUNTER_EP_NAME@-ios_sim"
    DOWNLOAD_COMMAND
    ""
    DOWNLOAD_DIR
    "@HUNTER_PACKAGE_DOWNLOAD_DIR@"
    SOURCE_DIR
    "@HUNTER_PACKAGE_SOURCE_DIR@"
    INSTALL_DIR
    "@HUNTER_INSTALL_PREFIX@"
        # not used, just avoid creating Install/<name> empty directory
    CONFIGURE_COMMAND
    ""
    BUILD_COMMAND
    ""
    INSTALL_COMMAND
    "${CMAKE_COMMAND}" -E make_directory "@HUNTER_INSTALL_PREFIX@/lib"
    COMMAND
    "@HUNTER_SELF@/scripts/create-boost-ios-fatlib.sh"
    "@HUNTER_PACKAGE_SOURCE_DIR@"
    "${LIBNAME}"
    "@HUNTER_PACKAGE_COMPONENT@"
    "@HUNTER_INSTALL_PREFIX@/lib"
    ${extra_lib_command}
)
