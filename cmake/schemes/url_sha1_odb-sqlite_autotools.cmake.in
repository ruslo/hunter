# Copyright (c) 2013, 2015 Ruslan Baratov, Alexandre Pretyman
# All rights reserved.

cmake_minimum_required(VERSION 3.0)
project(Hunter)

include(ExternalProject) # ExternalProject_Add

list(APPEND CMAKE_MODULE_PATH "@HUNTER_SELF@/cmake/modules")

include(hunter_fatal_error)
include(hunter_status_debug)
include(hunter_test_string_not_empty)

include(hunter_autotools_append_toolchain_binaries)
include(hunter_autotools_append_preprocessor_flags)
include(hunter_autotools_append_compiler_cxxflags)
include(hunter_autotools_append_compiler_cflags)
include(hunter_autotools_append_linker_flags)

hunter_status_debug("Scheme: url_sha1_autotools")

set(HUNTER_STATUS_DEBUG "@HUNTER_STATUS_DEBUG@")

if("@MSVC@")
  hunter_fatal_error("Autotools scheme not supported with Visual Studio")   
endif()

list(APPEND CMAKE_MODULE_PATH "@HUNTER_SELF@/cmake/find")

set(ODB_ROOT "@ODB_ROOT@")
find_package(odb)

set(SQLITE3_ROOT "@SQLITE3_ROOT@")
find_package(SQLite3)

# Check preconditions
hunter_test_string_not_empty("@HUNTER_SELF@")
hunter_test_string_not_empty("@HUNTER_EP_NAME@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_URL@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_SHA1@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_DOWNLOAD_DIR@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_SOURCE_DIR@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_INSTALL_PREFIX@")

set(configure_command "./configure")
if("@ANDROID@")
  #used by hunter_autotools_append_preprocessor_flags
  hunter_test_string_not_empty("${CMAKE_C_FLAGS}") 
  #used by hunter_autotools_append_compiler_cxxflags
  hunter_test_string_not_empty("${CMAKE_CXX_FLAGS}")
  #AWP: in theory, lots of other checks should be in place.
  #  lets wait for the RaspberryPi support so we get a better
  #  of where to put them.
  hunter_test_string_not_empty("${ANDROID_TOOLCHAIN_MACHINE_NAME}")
  set(configure_opts ${configure_opts} --host=${ANDROID_TOOLCHAIN_MACHINE_NAME})
endif()

hunter_autotools_append_toolchain_binaries(configure_opts)
hunter_autotools_append_preprocessor_flags(" -I${ODB_INCLUDE_DIR} -I${SQLITE3_INCLUDE_DIR} " configure_opts)
hunter_autotools_append_compiler_cxxflags("" configure_opts)
hunter_autotools_append_compiler_cflags("" configure_opts)

set(ldflags "${STATIC_LIBRARY_FLAGS} -L${ODB_LIB_DIR} -lodb -L${SQLITE3_LIB_DIR} -lsqlite3")

hunter_autotools_append_linker_flags("${ldflags}" configure_opts)

hunter_status_debug("Autotools configure options: ${configure_opts}")

set(
    configure_command
    . "@HUNTER_SELF@/scripts/clear-all.sh" && "${configure_command}"
)
set(build_command . "@HUNTER_SELF@/scripts/clear-all.sh" && make)

ExternalProject_Add(
    "@HUNTER_EP_NAME@"
    URL
    @HUNTER_PACKAGE_URL@
    URL_HASH
    SHA1=@HUNTER_PACKAGE_SHA1@
    DOWNLOAD_DIR
    "@HUNTER_PACKAGE_DOWNLOAD_DIR@"
    SOURCE_DIR
    "@HUNTER_PACKAGE_SOURCE_DIR@"
    INSTALL_DIR
    "@HUNTER_PACKAGE_INSTALL_PREFIX@"
        # not used, just avoid creating Install/<name> empty directory
    CONFIGURE_COMMAND
    ${configure_command}
    ${configure_opts}
    "--prefix=@HUNTER_PACKAGE_INSTALL_PREFIX@"
    BUILD_COMMAND
    ${build_command}
    BUILD_IN_SOURCE
    1
    INSTALL_COMMAND
    make install
)
